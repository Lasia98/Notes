zhuliang@172.16.101.247
2882661

一、环境
1、docker
（1）设置存储库
更新apt软件包索引并安装软件包以允许apt通过HTTPS使用存储库：
$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
    
（2）添加Docker的官方GPG密钥：
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥 。
说明：
curl的参数
-f不输出错误
 -f, --fail
(HTTP) Fail silently (no output at all) on server errors.
使用`-L`参数，curl就会自动跳转到新的网址
-s参数将不输出错误和进度信息
-s, --silent
Silent or quiet mode. Don't show progress meter or error messages.  
Makes Curl mute. It will still output the data you ask for, potentially even to the terminal/stdout unless you redirect it.
-S参数指定只输出错误信息，通常与-s一起使用
-S, --show-error
When used with -s it makes curl show an error message if it fails.

apt-key命令
用于管理Debian Linux系统中的软件包密钥。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。

$ sudo apt-key fingerprint 0EBFCD88
结果：
pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]

（3）使用以下命令来设置稳定的存储库
注意：下面的lsb_release -cs子命令返回Ubuntu发行版的名称，例如xenial。有时，在Linux Mint等发行版中，您可能需要更改$(lsb_release -cs) 为父Ubuntu发行版。例如，如果您使用 Linux Mint Tessa，则可以使用bionic。Docker对未经测试和不受支持的Ubuntu发行版不提供任何保证。
$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
（4）安装DOCKER引擎
更新apt程序包索引，并安装最新版本的Docker Engine和容器
 $ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io
 
（5）运行hello-world 映像来验证是否正确安装了Docker Engine
$ sudo docker run hello-world


2、docker-compose
（1）安装
方式一
pip安装：sudo pip install docker-compose（不好用）
说明
运行docker-compose时报错：SyntaxError: Non-ASCII character '\xe2' in file /usr/local/lib/python2.7/dist-packages/zipp.py on line 154, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details

Error: No such container: cli

方式二
从github上下载docker-compose二进制文件安装：sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
（2）添加可执行权限：sudo chmod +x /usr/local/bin/docker-compose
（3）测试安装结果：docker-compose --version


3、go语言
方法一 手动安装
（1）下载：wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz

（2）解压：tar xzvf go1.11.linux-amd64.tar.gz -C /usr/local

（3）配置环境变量：sudo vi /etc/profile
export GOROOT=/usr/local/go
export PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH

（4）生效：source /etc/profile

（5）测试安装结果：
go run test.go
sudo go run test.go
test.go:
package main

import "fmt"

func main() {
   fmt.Println("Hello, World!")
}

说明
问题一：go语言的环境变量
使用source仅在当前终端下生效了，重启后才在全局生效
想要使用sudo go，需要修改/etc/sudoers
配置 /etc/sudoers 文件中的 Defaults secure_path 这一项
将 $GOROOT/bin 路径加入进去（使用绝对路径，如：/home/moonlightwatch/go/bin/）
如：
Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/local/go/bin"

问题二：studygolang网站无法连接
直接使用方法二apt安装

方法二
sudo apt install golang


二、单机Fabric配置
1、创建目录：
sudo mkdir -p $GOPATH/src/github.com/hyperledger
cd $GOPATH/src/github.com/hyperledger

2、下载： git clone https://github.com/hyperledger/fabric-samples.git

3、选择版本（不选的话默认最新版本）：
cd fabric-samples
sudo git checkout -b sample v1.4.0

4、构建镜像：
方式一
使用fabric-samples中的bootstrap.sh脚本构建镜像（不好使）
cd $GOPATH/src/github.com/hyperledger/fabric-samples/scripts
./bootstrap.sh 1.4.0 1.4.0 0.4.14 (可指定版本号，也可以默认安装最新版本)

方式二
使用fabric中的bootstrap.sh脚本（会自动下载fabric-samples）
git clone https://github.com/hyperledger/fabric.git
cd ./fabric/scripts
./bootstrap.sh 1.4.0 1.4.0 0.4.14 (可指定版本号，也可以默认安装最新版本)

方式三
使用官方文档中的该指令（会找不到1.4.7的镜像，也可能出错）
sudo curl -sSL http://bit.ly/2ysbOFE | sudo bash -s -- 1.4.0 1.4.0 0.4.14

说明：
fabric中的bootstrap.sh作用：
（1）从github上克隆 hyperledger/fabric-samples并进入该目录，然后切换到适当的版本
（2）在fabric-samples目录下安装特定平台的 Hyperledger Fabric 二进制可执行文件和配置文件
（3）下载指定版本的Hyperledger Fabric 的docker镜像
（来自https://zhuanlan.zhihu.com/p/130870450）

问题：
fabric-samples中的bootstrap.sh报错curl: (6) Could not resolve host: nexus.hyperledger.org
由于 “nexus.hyperledger.org” 仓库停用
解决：
按照官方文档（https://hyperledger-fabric.readthedocs.io/en/release-1.4/install.html）说明
sudo curl -sSL http://bit.ly/2ysbOFE | sudo bash -s -- 1.4.0 1.4.0 0.4.14

关于切换版本、安装二进制文件和docker镜像
bootstrap脚本：在书的第3章和博客的sample部分都使用bootstrap脚本进行镜像的下载,fabric中的脚本好使，fabric-sample中的脚本不好使
源码编译：在书的第11章和解决nexus问题的知乎文章中使用了直接下载fabric及fabric-ca源码并编译的方式，书中使用make docker构建镜像，文章中使用make release编译fabric源码得到二进制文件
另外一种获取脚本的方式：官方文档中使用sudo curl -sSL http://bit.ly/2ysbOFE | sudo bash -s -- 1.4.0 1.4.0 0.4.14

5、使用sample:first-network
sudo ./byfn.sh -m up
报错：
Error: failed to create deliver client for orderer: orderer client failed to connect to orderer.example.com:7050: failed to create new connection: context deadline exceeded
!!!!!!!!!!!!!!! Channel creation failed !!!!!!!!!!!!!!!!
========= ERROR !!! FAILED to execute End-2-End Scenario ===========

6、使用sample：test-network
此处的操作参考官方文档https://hyperledger-fabric.readthedocs.io/en/release-2.1/test_network.html
（1）启动网络：sudo ./network.sh up
This command creates a Fabric network that consists of two peer nodes, one ordering node. No channel is created when you run ./network.sh up
（2）创建channel：sudo ./network.sh createChannel
报错：Error: failed to create deliver client for orderer: orderer client failed to connect to localhost:7050: failed to create new connection: connection error: desc = "transport: error while dialing: dial tcp 127.0.0.1:7050: connect: connection refused"
解决：切换到first-network,执行sudo ./byfn.sh down
（3）Starting a chaincode on the channel：sudo ./network.sh deployCC


三、多节点fabric
1、按照单机方式将各个节点上的环境配置好
（1）节点ip
172.16.101.246
172.16.101.247
172.16.0.122
172.16.0.123

（2）配置环境
docker
docker-compose
go
fabric 1.4.0

（3）运行fisrst-network示例确保配置成功
sudo ./byfn.sh generate
sudo ./byfn.sh up
sudo ./byfn.sh down


2、在一台机器上生成证书和创世区块（这里使用first-network中的配置文件）
（1）使用crytogen和crypto-config.yaml生成MSP证书
cd ~/fabric/scripts/fabric-samples/bin
sudo ./cryptogen generate --config=/home/luzhenyan/fabric/scripts/fabric-samples/first-network/crypto-config.yaml
在当前目录下生成了
crypto-config
    |
    |——ordererOrganizations
    |
    |——peerOrganizations
说明：
MSP证书是超级账本网络实体的身份标识，实体在通信和交易时使用证书进行签名和认证
crypto-config.yaml文件定义了组织结构，据此可以为组织和成员生成数字证书和签名密钥
    
（2）使用configtxgen和configtx.yaml生成排序服务创世区块
添加环境变量指定configtx.yaml的位置：
cd ~/fabric/scripts/fabric-samples/first-network
export FABRIC_CFG_PATH=$PWD
cd ~/fabric/scripts/fabric-samples/bin
./configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block
在当前目录生成了channel-artifacts目录，并在该目录下生成创世区块geness.block，区块内容包括了联盟和组织信息、通道的访问控制策略等

说明：
由于前面的安装等操作都使用了sudo命令，导致文件许多权限为root用户的，环境变量也是root用户的
这里如果使用sudo执行configtxgen会导致读取不到修改过的环境变量
如果不使用sudo又有文件权限问题，最后使用chmod修改了文件权限，再执行./configtxgen
以后尽量不要使用sudo！！！好麻烦！！！

（3）使用configtxgen生成通道配置创世区块
设置环境变量通道名称：export CHANNEL_NAME=mychannel
./configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME
在channel-artifacts目录下生成通道配置channel.tx

（4）定义组织锚节点
./configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP
./configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP
在channel-artifacts目录下生成锚节点配置Org1MSPanchors.tx和Org2MSPanchors.tx

3、将上述配置文件复制到其他节点
即目录crypto-config和channel-artifacts

sudo cp -r crypto-config ~/fabric/config/
cp -r channel-artifacts ~/fabric/config/

sudo scp -r config luzhenyan@ccrfox246:~/hyperledger/fabric/config
sudo scp -r config lzy@ccrfox122:~/hyperledger/fabric/config
sudo scp -r config lzy@ccrfox123:~/hyperledger/fabric/config

4、设置docker-compose文件
（1）以docker-compose-cli.yaml为基础
设置
docker-compose-orderer.yaml 
docker-compose-peer0org1.yaml
docker-compose-peer1org1.yaml
docker-compose-peer0org2.yaml

（2）新建base目录
mkdir base
修改docker-compose-base.yaml，放到当前目录下的base目录中
将peer-base.yaml文件放到base下

（3）将配置文件复制到其他节点

5、在相应节点使用相应的docker-compose文件启动docker镜像
（1）设置IMAGE_TAG确定启动哪个镜像
export IMAGE_TAG=1.4.0

（2）启动镜像
sudo docker-compose -f docker-compose-orderer.yaml up -d

说明：
报错
ERROR: .IOError: [Errno 2] No such file or directory: u'/home/luzhenyan/hyperledger/fabric/config/base/docker-compose-base.yaml'
原因
配置中设置base文件在base目录下
在当前目录下新建一个base目录，将docker-compose-base.yaml移进去

报错
WARNING: The IMAGE_TAG variable is not set. Defaulting to a blank string.
ERROR: Couldn't connect to Docker daemon at http+docker://localunixsocket - is it running?
原因
安装时使用了sudo，使用时也需要sudo
其他原因及解决
https://www.awaimai.com/2587.html

报错
WARNING: The IMAGE_TAG variable is not set. Defaulting to a blank string.
Creating network "config_byfn" with the default driver
Creating volume "config_orderer.example.com" with default driver
ERROR: no such image: hyperledger/fabric-orderer:: invalid reference format
原因一
未设置IMAGE_TAG
原因二
设置的IMAGE_TAG为用户环境变量，使用sudo命令时环境变量会被重置
解决
修改/etc/sudoers中的 Defaults env_reset
改为 Defaults !env_reset

报错
ERROR: .IOError: [Errno 2] No such file or directory: u'/home/luzhenyan/hyperledger/fabric/config/base/peer-base.yaml'
原因
未配置peer-base.yaml

6、进入cli容器中创建channel、各peer加入channel、更新锚节点
（1）进入cli
docker exec -it cli bash

（2）创建channel
CHANNEL_NAME=mychannel
ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls true --cafile $ORDERER_CA
创建完成后ls可以看到原来的目录下多了一个mychannel.block文件

（3）peer加入channel
peer0.org1
CLI默认连接的是peer0.org1，将这个Peer加入mychannel只需要运行：
peer channel join -b mychannel.block

修改CLI的环境变量，使其指向另外的Peer
peer1.org1
CORE_PEER_LOCALMSPID="Org1MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 
CORE_PEER_ADDRESS=peer1.org1.example.com:7051
peer channel join -b mychannel.block

peer0.org2
CORE_PEER_LOCALMSPID="Org2MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp 
CORE_PEER_ADDRESS=peer0.org2.example.com:7051
peer channel join -b mychannel.block

（4）更新锚节点
对于Org1来说，peer0.org1是锚节点，我们需要连接上它并更新锚节点：
CORE_PEER_LOCALMSPID="Org1MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 
CORE_PEER_ADDRESS=peer0.org1.example.com:7051
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls true --cafile $ORDERER_CA

org2: peer0.org2
CORE_PEER_LOCALMSPID="Org2MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp 
CORE_PEER_ADDRESS=peer0.org2.example.com:7051
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls true --cafile $ORDERER_CA

7、安装链码

CORE_PEER_LOCALMSPID="Org1MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 
CORE_PEER_ADDRESS=peer0.org1.example.com:7051
peer chaincode install -n mycc -v 1.0 -p $lianmalujing
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go

说明：
在docker-compose中通过volume来设置镜像与主机的映射文件，需要将链码下载到主机的对应文件夹中，才能在docker中安装
安装时注意命令里使用的路径需要与镜像中链码的go文件所在路径对应
docker通过文件的inode建立映射，因此通过vim修改文件或用同名文件覆盖文件都会导致映射失效，需要重启镜像

8、实例化链码
peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P "OR      ('Org1MSP.member','Org2MSP.member')"

说明：
报错
Error: could not assemble transaction, err proposal response was not successful, error code 500, msg error starting container: error starting container: API error (404): network _basic not found
原因
由于peer-base.yaml中的CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_byfn
而${COMPOSE_PROJECT_NAME}未赋值
通过docker network ls命令查看到
NETWORK ID          NAME                DRIVER              SCOPE
c1ad5788fce9        bridge              bridge              local
d5185e38737b        config_byfn         bridge              local
2b5309ab6f9b        host                host                local
7062a8d7a671        none                null                local
修改peer-base.yaml为CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=config_byfn
重启镜像
https://forum.linuxfoundation.org/discussion/856052/lab-4-error-during-chaincode-instantiation

重新创建通道，报错
Error: got unexpected status: BAD_REQUEST -- error authorizing update: error validating ReadSet: readset expected key [Group]  /Channel/Application at version 0, but got version 1
害，还没解决，各种删镜像清环境都没用，重新生成channel.tx也不行
解决
最后新建了一个名字不同的通道，动态新建通道的方法如下
（1）生成通道配置channel.tx文件
cd ~/hyperledger/fabric/scripts/fabric-samples/first-network
export FABRIC_CFG_PATH=$PWD
sudo ./configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel2.tx -channelID mychannel2
生成新的mychannel2.tx文件
（2）生成新的锚节点配置tx文件
./configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors2.tx -channelID $CHANNEL_NAME -asOrg Org1MSP
./configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors2.tx -channelID $CHANNEL_NAME -asOrg Org2MSP
如果不进行这一步的话会在更新锚节点时报错
Error: Invalid channel create transaction : mismatched channel ID mychannel != mychannel2
（3）移到容器映射的目录下（此处为~/hyperledger/fabric/config/channel-artifacts）
sudo cp ./channel-artifacts/Org1MSPanchors2.tx ~/hyperledger/fabric/config/channel-artifacts/Org1MSPanchors2.tx 
sudo cp ./channel-artifacts/Org2MSPanchors2.tx ~/hyperledger/fabric/config/channel-artifacts/Org2MSPanchors2.tx 
（4）进入cli容器内创建通道、加入通道、更新锚节点、安装并实例化链码
与第一次操作相同，注意通道名和对应配置文件即可


9、链码查询
peer chaincode query -C mychannel2 -n mycc -c '{"Args":["query","a"]}'

10、链码调用
peer chaincode invoke -o orderer.example.com:7050  --tls true --cafile $ORDERER_CA -C mychannel2 -n mycc -c '{"Args":["invoke","a","b","10"]}'

11、在另一个peer节点上发起查询
（1）每个节点上chaincode下都需要有对应的链码文件
cd ~/hyperledger/fabric/scripts/fabric-samples/chaincode
sudo cp -r chaincode_example02/ ~/hyperledger/fabric/chaincode/

（2）安装链码并查询
a)同一个组织下
安装链码
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go
报错说已安装（不记得安装过没有 应该没有）
Error: Bad response: 500 - error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exists)

直接查询
peer chaincode query -C mychannel2 -n mycc -c '{"Args":["query","a"]}'
成功输出
90

b)Org2下
安装链码
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go
输出
2020-07-02 09:47:53.632 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 001 Using default escc
2020-07-02 09:47:53.632 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 002 Using default vscc
2020-07-02 09:47:53.911 UTC [chaincodeCmd] install -> INFO 003 Installed remotely response:<status:200 payload:"OK" > 

查询
peer chaincode query -C mychannel2 -n mycc -c '{"Args":["query","a"]}'
成功输出
90

说明：
只在一个节点的cli中切换环境变量设置了加入channel（至少123我记得没设置）
并且经历了多次重启容器
但是各个节点内的cli都显示已加入channel、更新锚节点，122和123还显示了之前创建的mychannel（是不是也说明了mychannel没删干净）
peer channel list 显示节点加入的channel

Org1中的peer1也不需要进行链码安装
Org2需要

报错
Error: endorsement failure during query. response: status:500 message:"failed to execute transaction 43d3fcb413d4afa515bfcd0a6184606889673e5b75892ce383608ff702ec41aa: [channel mychannel2] failed to get chaincode container info for mycc:1.0: could not get chaincode code: chaincode fingerprint mismatch: data mismatch"
使用peer chaincode list --installed 查询已安装链码
123节点：
Get installed chaincodes on peer:
Name: mycc, Version: 1.0, Path: github.com/chaincode/chaincode_example02/go, Id: 333a19b11063d0ade7be691f9f22c04ad369baba15660f7ae9511fd1a6488209
247节点：
Get installed chaincodes on peer:
Name: mycc, Version: 1.0, Path: github.com/chaincode/chaincode_example02/go, Id: 476fca1a949274001971f1ec2836cb09321f0b71268b3762d68931c93f218134
122节点
Get installed chaincodes on peer:
Name: mycc, Version: 1.0, Path: github.com/chaincode/chaincode_example02/go, Id: 476fca1a949274001971f1ec2836cb09321f0b71268b3762d68931c93f218134
可看出123节点链码ID不同
由于yaml配置文件问题，123中的cli第一次生成出错，修改后生成的cli名字为1d16ea1087e6_cli
推测这个过程可能导致某些环境不同，最后的链码ID不同
删掉当前cli，使用sudo docker-compose -f docker-compose-peer0org2.yaml down关闭当前容器
再重新启动，重启的cli容器无需重新配置环境，链码ID与其他节点一致，直接执行查询操作成功

12、生成和使用的配置文件整理
（1）使用crytogen和crypto-config.yaml生成MSP证书
在当前目录下生成了
crypto-config
    |
    |——ordererOrganizations
    |
    |——peerOrganizations
说明：
MSP证书是超级账本网络实体的身份标识，实体在通信和交易时使用证书进行签名和认证
crypto-config.yaml文件定义了组织结构，据此可以为组织和成员生成数字证书和签名密钥
（2）使用configtxgen和configtx.yaml生成排序服务创世区块
在当前目录生成了channel-artifacts目录，并在该目录下生成创世区块geness.block，区块内容包括了联盟和组织信息、通道的访问控制策略等
（3）使用configtxgen生成通道配置创世区块
在channel-artifacts目录下生成通道配置channel.tx
（4）定义组织锚节点
在channel-artifacts目录下生成锚节点配置Org1MSPanchors.tx和Org2MSPanchors.tx
channel-artifacts
    |
    |——geness.block
    |
    |——channel.tx
    |
    |——Org1MSPanchors.tx
    |
    |——Org2MSPanchors.tx
（5）设置docker-compose文件
config
  |——base
  |    |
  |    |——docker-compose-base.yaml
  |    |
  |    |——peer-base.yaml 
  |
  |——docker-compose-orderer.yaml 
  |
  |——docker-compose-peer0org1.yaml
  |
  |——docker-compose-peer1org1.yaml
  |
  |——docker-compose-peer0org2.yaml

（6）








